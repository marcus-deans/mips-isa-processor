$date
	Fri Jan 28 23:39:29 2022
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module alu2_tb $end
$var wire 1 ! overflow $end
$var wire 1 " isNotEqual $end
$var wire 1 # isLessThan $end
$var wire 32 $ Result [31:0] $end
$var reg 32 % A [31:0] $end
$var reg 32 & B [31:0] $end
$var reg 5 ' Shamt [4:0] $end
$var reg 5 ( opcode [4:0] $end
$scope module ALUU $end
$var wire 1 ) check_less_than_special $end
$var wire 1 * check_less_than_standard $end
$var wire 1 + check_sub $end
$var wire 5 , ctrl_ALUopcode [4:0] $end
$var wire 5 - ctrl_shiftamt [4:0] $end
$var wire 32 . data_A [31:0] $end
$var wire 32 / data_operandA [31:0] $end
$var wire 32 0 data_operandB [31:0] $end
$var wire 1 # isLessThan $end
$var wire 1 " isNotEqual $end
$var wire 1 1 not_msb_A $end
$var wire 1 2 not_msb_B $end
$var wire 1 3 not_msb_sum $end
$var wire 32 4 op6 [31:0] $end
$var wire 32 5 op7 [31:0] $end
$var wire 1 ! overflow $end
$var wire 1 6 overflow_neg $end
$var wire 1 7 overflow_pos $end
$var wire 32 8 sum [31:0] $end
$var wire 32 9 right_shifted_value [31:0] $end
$var wire 32 : propagate [31:0] $end
$var wire 32 ; left_shifted_value [31:0] $end
$var wire 32 < gen [31:0] $end
$var wire 32 = data_result [31:0] $end
$var wire 32 > data_operandB_inverted [31:0] $end
$var wire 32 ? data_B [31:0] $end
$var wire 3 @ compute_sub [2:0] $end
$var wire 1 A abbreviated_ALUopcode $end
$scope module a_and_b $end
$var wire 32 B a [31:0] $end
$var wire 32 C b [31:0] $end
$var wire 32 D out [31:0] $end
$upscope $end
$scope module a_or_b $end
$var wire 32 E a [31:0] $end
$var wire 32 F b [31:0] $end
$var wire 32 G out [31:0] $end
$upscope $end
$scope module add $end
$var wire 32 H a [31:0] $end
$var wire 32 I b [31:0] $end
$var wire 1 + c_in $end
$var wire 32 J g [31:0] $end
$var wire 32 K p [31:0] $end
$var wire 1 L w_block0 $end
$var wire 4 M w_block3 [3:0] $end
$var wire 3 N w_block2 [2:0] $end
$var wire 2 O w_block1 [1:0] $end
$var wire 32 P s [31:0] $end
$var wire 4 Q p_out [3:0] $end
$var wire 4 R g_out [3:0] $end
$var wire 1 S c_out $end
$var wire 5 T c [4:0] $end
$scope module block0 $end
$var wire 8 U a [7:0] $end
$var wire 8 V b [7:0] $end
$var wire 1 W c_in $end
$var wire 8 X g [7:0] $end
$var wire 1 Y g_out $end
$var wire 8 Z p [7:0] $end
$var wire 1 [ p_out $end
$var wire 1 \ w1 $end
$var wire 5 ] w5 [4:0] $end
$var wire 8 ^ w8 [7:0] $end
$var wire 7 _ w7 [6:0] $end
$var wire 6 ` w6 [5:0] $end
$var wire 4 a w4 [3:0] $end
$var wire 3 b w3 [2:0] $end
$var wire 2 c w2 [1:0] $end
$var wire 8 d s [7:0] $end
$var wire 1 e c_out $end
$var wire 9 f c [8:0] $end
$scope module alpha $end
$var wire 1 g c_in $end
$var wire 1 h s $end
$var wire 1 i x $end
$var wire 1 j y $end
$upscope $end
$scope module bravo $end
$var wire 1 k c_in $end
$var wire 1 l s $end
$var wire 1 m x $end
$var wire 1 n y $end
$upscope $end
$scope module charlie $end
$var wire 1 o c_in $end
$var wire 1 p s $end
$var wire 1 q x $end
$var wire 1 r y $end
$upscope $end
$scope module delta $end
$var wire 1 s c_in $end
$var wire 1 t s $end
$var wire 1 u x $end
$var wire 1 v y $end
$upscope $end
$scope module echo $end
$var wire 1 w c_in $end
$var wire 1 x s $end
$var wire 1 y x $end
$var wire 1 z y $end
$upscope $end
$scope module foxtrot $end
$var wire 1 { c_in $end
$var wire 1 | s $end
$var wire 1 } x $end
$var wire 1 ~ y $end
$upscope $end
$scope module golf $end
$var wire 1 !" c_in $end
$var wire 1 "" s $end
$var wire 1 #" x $end
$var wire 1 $" y $end
$upscope $end
$scope module hotel $end
$var wire 1 %" c_in $end
$var wire 1 &" s $end
$var wire 1 '" x $end
$var wire 1 (" y $end
$upscope $end
$upscope $end
$scope module block1 $end
$var wire 8 )" a [7:0] $end
$var wire 8 *" b [7:0] $end
$var wire 1 +" c_in $end
$var wire 8 ," g [7:0] $end
$var wire 1 -" g_out $end
$var wire 8 ." p [7:0] $end
$var wire 1 /" p_out $end
$var wire 1 0" w1 $end
$var wire 5 1" w5 [4:0] $end
$var wire 8 2" w8 [7:0] $end
$var wire 7 3" w7 [6:0] $end
$var wire 6 4" w6 [5:0] $end
$var wire 4 5" w4 [3:0] $end
$var wire 3 6" w3 [2:0] $end
$var wire 2 7" w2 [1:0] $end
$var wire 8 8" s [7:0] $end
$var wire 1 9" c_out $end
$var wire 9 :" c [8:0] $end
$scope module alpha $end
$var wire 1 ;" c_in $end
$var wire 1 <" s $end
$var wire 1 =" x $end
$var wire 1 >" y $end
$upscope $end
$scope module bravo $end
$var wire 1 ?" c_in $end
$var wire 1 @" s $end
$var wire 1 A" x $end
$var wire 1 B" y $end
$upscope $end
$scope module charlie $end
$var wire 1 C" c_in $end
$var wire 1 D" s $end
$var wire 1 E" x $end
$var wire 1 F" y $end
$upscope $end
$scope module delta $end
$var wire 1 G" c_in $end
$var wire 1 H" s $end
$var wire 1 I" x $end
$var wire 1 J" y $end
$upscope $end
$scope module echo $end
$var wire 1 K" c_in $end
$var wire 1 L" s $end
$var wire 1 M" x $end
$var wire 1 N" y $end
$upscope $end
$scope module foxtrot $end
$var wire 1 O" c_in $end
$var wire 1 P" s $end
$var wire 1 Q" x $end
$var wire 1 R" y $end
$upscope $end
$scope module golf $end
$var wire 1 S" c_in $end
$var wire 1 T" s $end
$var wire 1 U" x $end
$var wire 1 V" y $end
$upscope $end
$scope module hotel $end
$var wire 1 W" c_in $end
$var wire 1 X" s $end
$var wire 1 Y" x $end
$var wire 1 Z" y $end
$upscope $end
$upscope $end
$scope module block2 $end
$var wire 8 [" a [7:0] $end
$var wire 8 \" b [7:0] $end
$var wire 1 ]" c_in $end
$var wire 8 ^" g [7:0] $end
$var wire 1 _" g_out $end
$var wire 8 `" p [7:0] $end
$var wire 1 a" p_out $end
$var wire 1 b" w1 $end
$var wire 5 c" w5 [4:0] $end
$var wire 8 d" w8 [7:0] $end
$var wire 7 e" w7 [6:0] $end
$var wire 6 f" w6 [5:0] $end
$var wire 4 g" w4 [3:0] $end
$var wire 3 h" w3 [2:0] $end
$var wire 2 i" w2 [1:0] $end
$var wire 8 j" s [7:0] $end
$var wire 1 k" c_out $end
$var wire 9 l" c [8:0] $end
$scope module alpha $end
$var wire 1 m" c_in $end
$var wire 1 n" s $end
$var wire 1 o" x $end
$var wire 1 p" y $end
$upscope $end
$scope module bravo $end
$var wire 1 q" c_in $end
$var wire 1 r" s $end
$var wire 1 s" x $end
$var wire 1 t" y $end
$upscope $end
$scope module charlie $end
$var wire 1 u" c_in $end
$var wire 1 v" s $end
$var wire 1 w" x $end
$var wire 1 x" y $end
$upscope $end
$scope module delta $end
$var wire 1 y" c_in $end
$var wire 1 z" s $end
$var wire 1 {" x $end
$var wire 1 |" y $end
$upscope $end
$scope module echo $end
$var wire 1 }" c_in $end
$var wire 1 ~" s $end
$var wire 1 !# x $end
$var wire 1 "# y $end
$upscope $end
$scope module foxtrot $end
$var wire 1 ## c_in $end
$var wire 1 $# s $end
$var wire 1 %# x $end
$var wire 1 &# y $end
$upscope $end
$scope module golf $end
$var wire 1 '# c_in $end
$var wire 1 (# s $end
$var wire 1 )# x $end
$var wire 1 *# y $end
$upscope $end
$scope module hotel $end
$var wire 1 +# c_in $end
$var wire 1 ,# s $end
$var wire 1 -# x $end
$var wire 1 .# y $end
$upscope $end
$upscope $end
$scope module block3 $end
$var wire 8 /# a [7:0] $end
$var wire 8 0# b [7:0] $end
$var wire 1 1# c_in $end
$var wire 8 2# g [7:0] $end
$var wire 1 3# g_out $end
$var wire 8 4# p [7:0] $end
$var wire 1 5# p_out $end
$var wire 1 6# w1 $end
$var wire 5 7# w5 [4:0] $end
$var wire 8 8# w8 [7:0] $end
$var wire 7 9# w7 [6:0] $end
$var wire 6 :# w6 [5:0] $end
$var wire 4 ;# w4 [3:0] $end
$var wire 3 <# w3 [2:0] $end
$var wire 2 =# w2 [1:0] $end
$var wire 8 ># s [7:0] $end
$var wire 1 ?# c_out $end
$var wire 9 @# c [8:0] $end
$scope module alpha $end
$var wire 1 A# c_in $end
$var wire 1 B# s $end
$var wire 1 C# x $end
$var wire 1 D# y $end
$upscope $end
$scope module bravo $end
$var wire 1 E# c_in $end
$var wire 1 F# s $end
$var wire 1 G# x $end
$var wire 1 H# y $end
$upscope $end
$scope module charlie $end
$var wire 1 I# c_in $end
$var wire 1 J# s $end
$var wire 1 K# x $end
$var wire 1 L# y $end
$upscope $end
$scope module delta $end
$var wire 1 M# c_in $end
$var wire 1 N# s $end
$var wire 1 O# x $end
$var wire 1 P# y $end
$upscope $end
$scope module echo $end
$var wire 1 Q# c_in $end
$var wire 1 R# s $end
$var wire 1 S# x $end
$var wire 1 T# y $end
$upscope $end
$scope module foxtrot $end
$var wire 1 U# c_in $end
$var wire 1 V# s $end
$var wire 1 W# x $end
$var wire 1 X# y $end
$upscope $end
$scope module golf $end
$var wire 1 Y# c_in $end
$var wire 1 Z# s $end
$var wire 1 [# x $end
$var wire 1 \# y $end
$upscope $end
$scope module hotel $end
$var wire 1 ]# c_in $end
$var wire 1 ^# s $end
$var wire 1 _# x $end
$var wire 1 `# y $end
$upscope $end
$upscope $end
$upscope $end
$scope module alu_mux $end
$var wire 32 a# in0 [31:0] $end
$var wire 32 b# in1 [31:0] $end
$var wire 32 c# in2 [31:0] $end
$var wire 32 d# in3 [31:0] $end
$var wire 32 e# in6 [31:0] $end
$var wire 32 f# in7 [31:0] $end
$var wire 3 g# select [2:0] $end
$var wire 32 h# w2 [31:0] $end
$var wire 32 i# w1 [31:0] $end
$var wire 32 j# out [31:0] $end
$var wire 32 k# in5 [31:0] $end
$var wire 32 l# in4 [31:0] $end
$scope module first_bottom $end
$var wire 32 m# in2 [31:0] $end
$var wire 32 n# in3 [31:0] $end
$var wire 2 o# select [1:0] $end
$var wire 32 p# w2 [31:0] $end
$var wire 32 q# w1 [31:0] $end
$var wire 32 r# out [31:0] $end
$var wire 32 s# in1 [31:0] $end
$var wire 32 t# in0 [31:0] $end
$scope module first_bottom $end
$var wire 32 u# in0 [31:0] $end
$var wire 32 v# in1 [31:0] $end
$var wire 1 w# select $end
$var wire 32 x# out [31:0] $end
$upscope $end
$scope module first_top $end
$var wire 1 y# select $end
$var wire 32 z# out [31:0] $end
$var wire 32 {# in1 [31:0] $end
$var wire 32 |# in0 [31:0] $end
$upscope $end
$scope module second $end
$var wire 32 }# in0 [31:0] $end
$var wire 32 ~# in1 [31:0] $end
$var wire 1 !$ select $end
$var wire 32 "$ out [31:0] $end
$upscope $end
$upscope $end
$scope module first_top $end
$var wire 32 #$ in0 [31:0] $end
$var wire 32 $$ in1 [31:0] $end
$var wire 32 %$ in2 [31:0] $end
$var wire 32 &$ in3 [31:0] $end
$var wire 2 '$ select [1:0] $end
$var wire 32 ($ w2 [31:0] $end
$var wire 32 )$ w1 [31:0] $end
$var wire 32 *$ out [31:0] $end
$scope module first_bottom $end
$var wire 32 +$ in0 [31:0] $end
$var wire 32 ,$ in1 [31:0] $end
$var wire 1 -$ select $end
$var wire 32 .$ out [31:0] $end
$upscope $end
$scope module first_top $end
$var wire 32 /$ in0 [31:0] $end
$var wire 32 0$ in1 [31:0] $end
$var wire 1 1$ select $end
$var wire 32 2$ out [31:0] $end
$upscope $end
$scope module second $end
$var wire 32 3$ in0 [31:0] $end
$var wire 32 4$ in1 [31:0] $end
$var wire 1 5$ select $end
$var wire 32 6$ out [31:0] $end
$upscope $end
$upscope $end
$scope module second $end
$var wire 32 7$ in0 [31:0] $end
$var wire 32 8$ in1 [31:0] $end
$var wire 1 9$ select $end
$var wire 32 :$ out [31:0] $end
$upscope $end
$upscope $end
$scope module left_shifter $end
$var wire 5 ;$ amount [4:0] $end
$var wire 32 <$ x [31:0] $end
$var wire 32 =$ w5 [31:0] $end
$var wire 32 >$ w4 [31:0] $end
$var wire 32 ?$ w3 [31:0] $end
$var wire 32 @$ w2 [31:0] $end
$var wire 32 A$ w1 [31:0] $end
$var wire 32 B$ shift4 [31:0] $end
$var wire 32 C$ shift3 [31:0] $end
$var wire 32 D$ shift2 [31:0] $end
$var wire 32 E$ shift1 [31:0] $end
$var wire 32 F$ out [31:0] $end
$scope module s1 $end
$var wire 32 G$ x [31:0] $end
$var wire 32 H$ out [31:0] $end
$upscope $end
$scope module s16 $end
$var wire 32 I$ x [31:0] $end
$var wire 32 J$ out [31:0] $end
$upscope $end
$scope module s2 $end
$var wire 32 K$ x [31:0] $end
$var wire 32 L$ out [31:0] $end
$upscope $end
$scope module s4 $end
$var wire 32 M$ x [31:0] $end
$var wire 32 N$ out [31:0] $end
$upscope $end
$scope module s8 $end
$var wire 32 O$ x [31:0] $end
$var wire 32 P$ out [31:0] $end
$upscope $end
$upscope $end
$scope module not_b $end
$var wire 32 Q$ a [31:0] $end
$var wire 32 R$ out [31:0] $end
$upscope $end
$scope module right_shifter $end
$var wire 5 S$ amount [4:0] $end
$var wire 32 T$ x [31:0] $end
$var wire 32 U$ w5 [31:0] $end
$var wire 32 V$ w4 [31:0] $end
$var wire 32 W$ w3 [31:0] $end
$var wire 32 X$ w2 [31:0] $end
$var wire 32 Y$ w1 [31:0] $end
$var wire 32 Z$ shift4 [31:0] $end
$var wire 32 [$ shift3 [31:0] $end
$var wire 32 \$ shift2 [31:0] $end
$var wire 32 ]$ shift1 [31:0] $end
$var wire 32 ^$ out [31:0] $end
$scope module s1 $end
$var wire 32 _$ x [31:0] $end
$var wire 32 `$ out [31:0] $end
$upscope $end
$scope module s16 $end
$var wire 32 a$ x [31:0] $end
$var wire 32 b$ out [31:0] $end
$upscope $end
$scope module s2 $end
$var wire 32 c$ x [31:0] $end
$var wire 32 d$ out [31:0] $end
$upscope $end
$scope module s4 $end
$var wire 32 e$ x [31:0] $end
$var wire 32 f$ out [31:0] $end
$upscope $end
$scope module s8 $end
$var wire 32 g$ x [31:0] $end
$var wire 32 h$ out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10101010101010101010101 h$
b1010101010101010101010101010101 g$
b101010101010101010101010101 f$
b1010101010101010101010101010101 e$
b10101010101010101010101010101 d$
b1010101010101010101010101010101 c$
b101010101010101 b$
b1010101010101010101010101010101 a$
b101010101010101010101010101010 `$
b1010101010101010101010101010101 _$
b1010101010101010101010101010101 ^$
b1010101010101010101010101010101 ]$
b1010101010101010101010101010101 \$
b1010101010101010101010101010101 [$
b1010101010101010101010101010101 Z$
b101010101010101 Y$
b10101010101010101010101 X$
b101010101010101010101010101 W$
b10101010101010101010101010101 V$
b101010101010101010101010101010 U$
b1010101010101010101010101010101 T$
b0 S$
b11110000111100001111000011110000 R$
b1111000011110000111100001111 Q$
b1010101010101010101010100000000 P$
b1010101010101010101010101010101 O$
b1010101010101010101010101010000 N$
b1010101010101010101010101010101 M$
b1010101010101010101010101010100 L$
b1010101010101010101010101010101 K$
b1010101010101010000000000000000 J$
b1010101010101010101010101010101 I$
b10101010101010101010101010101010 H$
b1010101010101010101010101010101 G$
b1010101010101010101010101010101 F$
b1010101010101010101010101010101 E$
b1010101010101010101010101010101 D$
b1010101010101010101010101010101 C$
b1010101010101010101010101010101 B$
b1010101010101010000000000000000 A$
b1010101010101010101010100000000 @$
b1010101010101010101010101010000 ?$
b1010101010101010101010101010100 >$
b10101010101010101010101010101010 =$
b1010101010101010101010101010101 <$
b0 ;$
b10001x0010001x0010001x0010001x0 :$
09$
b1010101010101010101010101010101 8$
b10001x0010001x0010001x0010001x0 7$
b10001x0010001x0010001x0010001x0 6$
05$
b11110101111101011111010111110101 4$
b10001x0010001x0010001x0010001x0 3$
b10001x0010001x0010001x0010001x0 2$
11$
b10001x0010001x0010001x0010001x0 0$
b10001x0010001x0010001x0010001x0 /$
b11110101111101011111010111110101 .$
1-$
b11110101111101011111010111110101 ,$
b1010000010100000101000001010000 +$
b10001x0010001x0010001x0010001x0 *$
b10001x0010001x0010001x0010001x0 )$
b11110101111101011111010111110101 ($
b1 '$
b11110101111101011111010111110101 &$
b1010000010100000101000001010000 %$
b10001x0010001x0010001x0010001x0 $$
b10001x0010001x0010001x0010001x0 #$
b1010101010101010101010101010101 "$
0!$
b0 ~#
b1010101010101010101010101010101 }#
b1010101010101010101010101010101 |#
b1010101010101010101010101010101 {#
b1010101010101010101010101010101 z#
1y#
b0 x#
1w#
b0 v#
b0 u#
b1010101010101010101010101010101 t#
b1010101010101010101010101010101 s#
b1010101010101010101010101010101 r#
b1010101010101010101010101010101 q#
b0 p#
b1 o#
b0 n#
b0 m#
b1010101010101010101010101010101 l#
b1010101010101010101010101010101 k#
b10001x0010001x0010001x0010001x0 j#
b10001x0010001x0010001x0010001x0 i#
b1010101010101010101010101010101 h#
b1 g#
b0 f#
b0 e#
b11110101111101011111010111110101 d#
b1010000010100000101000001010000 c#
b10001x0010001x0010001x0010001x0 b#
b10001x0010001x0010001x0010001x0 a#
1`#
0_#
0^#
1]#
1\#
1[#
1Z#
1Y#
1X#
0W#
0V#
1U#
1T#
1S#
0R#
0Q#
0P#
0O#
0N#
0M#
0L#
1K#
1J#
0I#
0H#
0G#
xF#
xE#
0D#
1C#
0B#
1A#
b1111000x1 @#
1?#
b10001x0 >#
b0 =#
b0 <#
b0 ;#
b1 :#
b10 9#
b101 8#
bz0000 7#
x6#
05#
b11110101 4#
13#
b1010000 2#
11#
b11110000 0#
b1010101 /#
1.#
0-#
0,#
1+#
1*#
1)#
1(#
1'#
1&#
0%#
0$#
1##
1"#
1!#
0~"
0}"
0|"
0{"
0z"
0y"
0x"
1w"
1v"
0u"
0t"
0s"
xr"
xq"
0p"
1o"
0n"
1m"
b1111000x1 l"
1k"
b10001x0 j"
b0 i"
b0 h"
b0 g"
b1 f"
b10 e"
b101 d"
bz0000 c"
xb"
0a"
b11110101 `"
1_"
b1010000 ^"
1]"
b11110000 \"
b1010101 ["
1Z"
0Y"
0X"
1W"
1V"
1U"
1T"
1S"
1R"
0Q"
0P"
1O"
1N"
1M"
0L"
0K"
0J"
0I"
0H"
0G"
0F"
1E"
1D"
0C"
0B"
0A"
x@"
x?"
0>"
1="
0<"
1;"
b1111000x1 :"
19"
b10001x0 8"
b0 7"
b0 6"
b0 5"
b1 4"
b10 3"
b101 2"
bz0000 1"
x0"
0/"
b11110101 ."
1-"
b1010000 ,"
1+"
b11110000 *"
b1010101 )"
1("
0'"
0&"
1%"
1$"
1#"
1""
1!"
1~
0}
0|
1{
1z
1y
0x
0w
0v
0u
0t
0s
0r
1q
1p
0o
0n
0m
xl
xk
0j
1i
0h
1g
b1111000x1 f
1e
b10001x0 d
b0 c
b0 b
b0 a
b1 `
b10 _
b101 ^
bz0000 ]
x\
0[
b11110101 Z
1Y
b1010000 X
1W
b11110000 V
b1010101 U
b11111 T
1S
b1111 R
b0 Q
b10001x0010001x0010001x0010001x0 P
b0 O
b0 N
b0 M
0L
b11110101111101011111010111110101 K
b1010000010100000101000001010000 J
b11110000111100001111000011110000 I
b1010101010101010101010101010101 H
b11110101111101011111010111110101 G
b11110000111100001111000011110000 F
b1010101010101010101010101010101 E
b1010000010100000101000001010000 D
b11110000111100001111000011110000 C
b1010101010101010101010101010101 B
1A
b111 @
b11110000111100001111000011110000 ?
b11110000111100001111000011110000 >
b10001x0010001x0010001x0010001x0 =
b1010000010100000101000001010000 <
b1010101010101010101010101010101 ;
b11110101111101011111010111110101 :
b1010101010101010101010101010101 9
b10001x0010001x0010001x0010001x0 8
07
06
b0 5
b0 4
13
02
11
b1111000011110000111100001111 0
b1010101010101010101010101010101 /
b1010101010101010101010101010101 .
b0 -
b1 ,
1+
0*
0)
b1 (
b0 '
b1111000011110000111100001111 &
b1010101010101010101010101010101 %
b10001x0010001x0010001x0010001x0 $
0#
1"
0!
$end
#100
